services:
  fuatilia-api:
    image: fuatilia-api:0.0.1
    build: .
    ports:
      - "8000:8000"
    environment:
      - TRACING_EXPORTER_ENDPOINT=${TRACING_EXPORTER_ENDPOINT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 1

  jaeger:
    image: jaegertracing/all-in-one:1.60.0
    container_name: jaeger
    ports:
      - "16686:16686"
      - "4318:4318"
      - "6831:6831"
      - "4317:4317"
    environment:
      - LOG_LEVEL=info
    deploy:
      mode: replicated
      replicas: 1

  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/${ENVIRONMENT}-config.yaml'
    ports:
      - 9090:9090
    deploy:
      mode: replicated
      replicas: 1

  promtail:
    image: grafana/promtail:3.1.1
    container_name: promtail
    volumes:
      - ./logs:/var/logs/fuatilia-api
      - ./promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - '--config.file=/etc/promtail/${ENVIRONMENT}-config.yaml'
    ports:
      - "9080:9080"
    deploy:
      mode: replicated
      replicas: 1

  loki:
    image: grafana/loki:2.7.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
    command:
      - '--config.file=/etc/loki/${ENVIRONMENT}-config.yaml'
    depends_on:
      - promtail
    deploy:
      mode: replicated
      replicas: 1

  grafana:
    image: grafana/grafana:11.1.4
    container_name: grafana
    volumes:
      - ./grafana/dashboard.yaml:/etc/grafana/provisioning/datasources/dashboard.yaml
    ports:
      - "3000:3000"
    depends_on:
      - fuatilia-api
      - prometheus
      - promtail
      - jaeger
      - loki
    deploy:
      mode: replicated
      replicas: 1

  redis:
    image: redis:7.4.1
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 10s
      retries: 5
    command: redis-server --loglevel verbose
    deploy:
      mode: replicated
      replicas: 1

# FOR TESTS
  # redis-insight:
  #   image: redis/redisinsight:latest
  #   restart: always
  #   ports:
  #     - "5540:5540"
